{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/my-room-3d/src/components/Scene/Scene.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Suspense, useRef } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { OrbitControls, useGLTF, useTexture } from \"@react-three/drei\";\nimport RoomGlb from \"../../complex-room-28.glb\";\nimport RoomImg from \"../../complex-room-27.jpg\";\nimport { useState, useEffect } from \"react\";\nimport wallpaper from \"../../wallpaper.jpg\";\nimport code from \"../../code.png\";\nimport animateMov from \"../../animateVideo.mp4\";\nimport transformerMov from \"../../movieVideo.mp4\";\nimport { shaders } from \"../../shader/shader\";\nimport gsap from \"gsap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Model = () => {\n  _s();\n\n  const [bakedTexture, imgTexture, codeImgTexture] = useTexture([RoomImg, wallpaper, code]);\n  const [initialLoading, setInitialLoading] = useState(false);\n  const {\n    nodes\n  } = useGLTF(RoomGlb);\n  const specialKeyArr = [\"Scene\", \"Lamp_Emission\", \"Monitor_Emission\", \"Ipad_Pro_Emission\", \"Macbook_Pro_Emission\", \"TV_Screen\"];\n  const [video] = useState(() => {\n    const vid = document.createElement(\"video\");\n    vid.src = animateMov;\n    vid.crossOrigin = \"Anonymous\";\n    vid.loop = true;\n    vid.muted = \"muted\";\n    vid.playsInline = true;\n    vid.autoplay = true;\n    return vid;\n  });\n  const [movie] = useState(() => {\n    const vid = document.createElement(\"video\");\n    vid.src = transformerMov;\n    vid.crossOrigin = \"Anonymous\";\n    vid.loop = true;\n    vid.muted = \"muted\";\n    vid.playsInline = true;\n    vid.autoplay = true;\n    return vid;\n  });\n  useEffect(() => {\n    video.play();\n  }, [video]);\n  useEffect(() => {\n    movie.play();\n  }, [movie]);\n  const loadingElement = document.querySelector(\".loading-bar\");\n  useEffect(() => {\n    let gsapTimeline = gsap.timeline();\n\n    if (!initialLoading) {\n      gsapTimeline.set(ref.current.uniforms.uAlpha, {\n        value: 1\n      }).set(loadingElement, {\n        transformOrigin: \"top left\"\n      }).fromTo(loadingElement, {\n        scaleX: 0.1\n      }, {\n        scaleX: 0.99,\n        duration: 1.5\n      }).to(loadingElement, {\n        scaleX: 0,\n        duration: 0.8,\n        transformOrigin: \"100% 0\",\n        delay: 0.3\n      }).to(ref.current.uniforms.uAlpha, {\n        duration: 0.8,\n        value: 0,\n        delay: 0.2\n      });\n      setInitialLoading(true);\n    }\n  });\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    dispose: null,\n    children: [Object.keys(nodes).filter(key => !specialKeyArr.includes(key)).map((key, index) => {\n      const node = nodes[key];\n      return /*#__PURE__*/_jsxDEV(\"mesh\", {\n        geometry: node.geometry,\n        position: node.position,\n        rotation: node.rotation,\n        scale: node.scale,\n        children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n          map: bakedTexture,\n          \"map-flipY\": false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: nodes.Lamp_Emission.geometry,\n      position: nodes.Lamp_Emission.position,\n      rotation: nodes.Lamp_Emission.rotation,\n      scale: nodes.Lamp_Emission.scale,\n      \"material-color\": \"#ffffff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [nodes.Monitor_Emission.position.x, nodes.Monitor_Emission.position.y, nodes.Monitor_Emission.position.z - 0.035],\n      rotation: [0, Math.PI, 0],\n      scale: [0.97, 0.97, 0.97],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [1.724, 0.989]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        side: THREE.DoubleSide,\n        children: /*#__PURE__*/_jsxDEV(\"videoTexture\", {\n          attach: \"map\",\n          args: [video]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [nodes.TV_Screen.position.x - 1.235, nodes.TV_Screen.position.y - 0.23, nodes.TV_Screen.position.z],\n      rotation: [0, Math.PI / 2, 0],\n      scale: nodes.TV_Screen.scale,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [2.84, 1.651]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        side: THREE.DoubleSide,\n        children: /*#__PURE__*/_jsxDEV(\"videoTexture\", {\n          attach: \"map\",\n          args: [movie]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: nodes.Macbook_Pro_Emission.position,\n      rotation: [Math.PI * 20 / 180, -(Math.PI * 166) / 180, Math.PI * 5 / 180],\n      scale: nodes.Macbook_Pro_Emission.scale,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [0.811, 0.547]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        side: THREE.DoubleSide,\n        map: codeImgTexture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: nodes.Ipad_Pro_Emission.position,\n      rotation: [Math.PI / 2, 0, -Math.PI * 2 / 9],\n      scale: nodes.Ipad_Pro_Emission.scale,\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        args: [0.616, 0.473]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        side: THREE.DoubleSide,\n        map: imgTexture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        args: [2, 2, 1, 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n        ref: ref,\n        attach: \"material\",\n        transparent: true,\n        uniforms: shaders.uniforms,\n        vertexShader: shaders.vertexShader,\n        fragmentShader: shaders.fragmentShader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Model, \"rdrmNPoYAyh9YIpSjht1kvmdLYc=\", false, function () {\n  return [useTexture, useGLTF];\n});\n\n_c = Model;\n\nconst Scene = () => {\n  _s2();\n\n  const {\n    camera,\n    gl: {\n      domElement\n    }\n  } = useThree();\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: [/*#__PURE__*/_jsxDEV(\"color\", {\n      attach: \"background\",\n      args: [\"#000000\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Model, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enableZoom: false,\n      maxAzimuthAngle: Math.PI,\n      maxPolarAngle: Math.PI * 3 / 7,\n      minAzimuthAngle: Math.PI / 2,\n      minPolarAngle: 0,\n      enablePan: false,\n      enableDamping: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Scene, \"JqKy/gE1FrOEVxZa6/TDLg+GpiQ=\", false, function () {\n  return [useThree];\n});\n\n_c2 = Scene;\nexport default Scene;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Model\");\n$RefreshReg$(_c2, \"Scene\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/my-room-3d/src/components/Scene/Scene.js"],"names":["Suspense","useRef","useThree","THREE","OrbitControls","useGLTF","useTexture","RoomGlb","RoomImg","useState","useEffect","wallpaper","code","animateMov","transformerMov","shaders","gsap","Model","bakedTexture","imgTexture","codeImgTexture","initialLoading","setInitialLoading","nodes","specialKeyArr","video","vid","document","createElement","src","crossOrigin","loop","muted","playsInline","autoplay","movie","play","loadingElement","querySelector","gsapTimeline","timeline","set","ref","current","uniforms","uAlpha","value","transformOrigin","fromTo","scaleX","duration","to","delay","Object","keys","filter","key","includes","map","index","node","geometry","position","rotation","scale","Lamp_Emission","Monitor_Emission","x","y","z","Math","PI","DoubleSide","TV_Screen","Macbook_Pro_Emission","Ipad_Pro_Emission","vertexShader","fragmentShader","Scene","camera","gl","domElement"],"mappings":"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","sourcesContent":["import { Suspense, useRef } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { OrbitControls, useGLTF, useTexture } from \"@react-three/drei\";\nimport RoomGlb from \"../../complex-room-28.glb\";\nimport RoomImg from \"../../complex-room-27.jpg\";\nimport { useState, useEffect } from \"react\";\nimport wallpaper from \"../../wallpaper.jpg\";\nimport code from \"../../code.png\";\nimport animateMov from \"../../animateVideo.mp4\";\nimport transformerMov from \"../../movieVideo.mp4\";\nimport { shaders } from \"../../shader/shader\";\nimport gsap from \"gsap\";\n\nconst Model = () => {\n  const [bakedTexture, imgTexture, codeImgTexture] = useTexture([\n    RoomImg,\n    wallpaper,\n    code,\n  ]);\n  const [initialLoading, setInitialLoading] = useState(false);\n  const { nodes } = useGLTF(RoomGlb);\n  const specialKeyArr = [\n    \"Scene\",\n    \"Lamp_Emission\",\n    \"Monitor_Emission\",\n    \"Ipad_Pro_Emission\",\n    \"Macbook_Pro_Emission\",\n    \"TV_Screen\",\n  ];\n\n  const [video] = useState(() => {\n    const vid = document.createElement(\"video\");\n    vid.src = animateMov;\n    vid.crossOrigin = \"Anonymous\";\n    vid.loop = true;\n    vid.muted = \"muted\";\n    vid.playsInline = true;\n    vid.autoplay = true;\n    return vid;\n  });\n\n  const [movie] = useState(() => {\n    const vid = document.createElement(\"video\");\n    vid.src = transformerMov;\n    vid.crossOrigin = \"Anonymous\";\n    vid.loop = true;\n    vid.muted = \"muted\";\n    vid.playsInline = true;\n    vid.autoplay = true;\n    return vid;\n  });\n\n  useEffect(() => {\n    video.play();\n  }, [video]);\n\n  useEffect(() => {\n    movie.play();\n  }, [movie]);\n\n  const loadingElement = document.querySelector(\".loading-bar\");\n  useEffect(() => {\n    let gsapTimeline = gsap.timeline();\n    if (!initialLoading) {\n      gsapTimeline\n        .set(ref.current.uniforms.uAlpha, { value: 1 })\n        .set(loadingElement, { transformOrigin: \"top left\" })\n        .fromTo(\n          loadingElement,\n          { scaleX: 0.1 },\n          { scaleX: 0.99, duration: 1.5 }\n        )\n        .to(loadingElement, {\n          scaleX: 0,\n          duration: 0.8,\n          transformOrigin: \"100% 0\",\n          delay: 0.3,\n        })\n        .to(ref.current.uniforms.uAlpha, {\n          duration: 0.8,\n          value: 0,\n          delay: 0.2,\n        });\n      setInitialLoading(true);\n    }\n  });\n\n  const ref = useRef();\n\n  return (\n    <group dispose={null}>\n      {Object.keys(nodes)\n        .filter((key) => !specialKeyArr.includes(key))\n        .map((key, index) => {\n          const node = nodes[key];\n          return (\n            <mesh\n              geometry={node.geometry}\n              key={index}\n              position={node.position}\n              rotation={node.rotation}\n              scale={node.scale}\n            >\n              <meshBasicMaterial map={bakedTexture} map-flipY={false} />\n            </mesh>\n          );\n        })}\n      <mesh\n        geometry={nodes.Lamp_Emission.geometry}\n        position={nodes.Lamp_Emission.position}\n        rotation={nodes.Lamp_Emission.rotation}\n        scale={nodes.Lamp_Emission.scale}\n        material-color=\"#ffffff\"\n      />\n      <mesh\n        position={[\n          nodes.Monitor_Emission.position.x,\n          nodes.Monitor_Emission.position.y,\n          nodes.Monitor_Emission.position.z - 0.035,\n        ]}\n        rotation={[0, Math.PI, 0]}\n        scale={[0.97, 0.97, 0.97]}\n      >\n        <planeGeometry args={[1.724, 0.989]} />\n        <meshBasicMaterial side={THREE.DoubleSide}>\n          <videoTexture attach=\"map\" args={[video]} />\n        </meshBasicMaterial>\n      </mesh>\n\n      <mesh\n        position={[\n          nodes.TV_Screen.position.x - 1.235,\n          nodes.TV_Screen.position.y - 0.23,\n          nodes.TV_Screen.position.z,\n        ]}\n        rotation={[0, Math.PI / 2, 0]}\n        scale={nodes.TV_Screen.scale}\n      >\n        <planeGeometry args={[2.84, 1.651]} />\n        <meshBasicMaterial side={THREE.DoubleSide}>\n          <videoTexture attach=\"map\" args={[movie]} />\n        </meshBasicMaterial>\n      </mesh>\n\n      <mesh\n        position={nodes.Macbook_Pro_Emission.position}\n        rotation={[\n          (Math.PI * 20) / 180,\n          -(Math.PI * 166) / 180,\n          (Math.PI * 5) / 180,\n        ]}\n        scale={nodes.Macbook_Pro_Emission.scale}\n      >\n        <planeGeometry args={[0.811, 0.547]} />\n        <meshBasicMaterial side={THREE.DoubleSide} map={codeImgTexture} />\n      </mesh>\n\n      <mesh\n        position={nodes.Ipad_Pro_Emission.position}\n        rotation={[Math.PI / 2, 0, (-Math.PI * 2) / 9]}\n        scale={nodes.Ipad_Pro_Emission.scale}\n      >\n        <planeBufferGeometry args={[0.616, 0.473]} />\n        <meshBasicMaterial side={THREE.DoubleSide} map={imgTexture} />\n      </mesh>\n\n      <mesh>\n        <planeBufferGeometry args={[2, 2, 1, 1]} />\n        <shaderMaterial\n          ref={ref}\n          attach=\"material\"\n          transparent={true}\n          uniforms={shaders.uniforms}\n          vertexShader={shaders.vertexShader}\n          fragmentShader={shaders.fragmentShader}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nconst Scene = () => {\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n\n  const ref = useRef();\n  return (\n    <Suspense fallback={null}>\n      <color attach=\"background\" args={[\"#000000\"]} />\n      <Model />\n      <OrbitControls\n        enableZoom={false}\n        maxAzimuthAngle={Math.PI}\n        maxPolarAngle={(Math.PI * 3) / 7}\n        minAzimuthAngle={Math.PI / 2}\n        minPolarAngle={0}\n        enablePan={false}\n        enableDamping={true}\n      />\n      {/* <mesh>\n        <planeBufferGeometry args={[2, 2, 1, 1]} />\n        <shaderMaterial\n          ref={ref}\n          attach=\"material\"\n          transparent={true}\n          uniforms={shaders.uniforms}\n          vertexShader={shaders.vertexShader}\n          fragmentShader={shaders.fragmentShader}\n        />\n      </mesh>\n      <Loader materialRef={ref.cu} /> */}\n    </Suspense>\n  );\n};\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}